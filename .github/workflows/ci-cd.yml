name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: kaseykim7123/24kng_webpages
  ARGOCD_REPO: kkkikki/24KNG_argocd

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install Pillow
        pip install -r requirements.txt
        pip install mysqlclient
        sudo apt-get update
        sudo apt-get install -y libmysqlclient-dev

    - name: Set environment variables
      run: |
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
        echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV

    - name: Run tests
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
      run: python ./app/manage.py test


  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build Docker image
      working-directory: ./app/
      run: |
        echo pwd
        docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
        docker build -t ${{ env.DOCKER_IMAGE }}:latest .

      
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Push Docker image
      run: |
        docker push ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        docker push ${{ env.DOCKER_IMAGE }}:latest

  update-argocd-repo:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        repository: ${{ env.ARGOCD_REPO }}
        token: ${{ secrets.ARGOCD_REPO_TOKEN }}
        fetch-depth: 1
        path: argo-repo  # 명시적으로 디렉토리 설정

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: 'latest'
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}

    - name: Authenticate Service Account
      run: |
        echo ${{ secrets.GCP_SA_KEY }} > ${HOME}/gcloud.json
        gcloud auth activate-service-account --key-file=${HOME}/gcloud.json
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

    - name: Authenticate with GKE
      run: gcloud container clusters get-credentials cluster-1 --zone us-east1-c --project ${{ secrets.GCP_PROJECT_ID }}


    - name: Set up kubectl
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: 'latest'

    - name: Deploy to Kubernetes
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      run: |
        mkdir -p $HOME/.kube
        echo "$KUBE_CONFIG_DATA" > $HOME/.kube/config

    - name: Apply Kubernetes Secret directly
      run: |
        kubectl apply --validate=false -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: db-credentials
        type: Opaque
        data:
          DB_PASSWORD: $(echo -n "${{ secrets.DB_PASSWORD }}" | base64 -w 0)
          DB_HOST: $(echo -n "${{ secrets.DB_HOST }}" | base64 -w 0)
          DB_NAME: $(echo -n "${{ secrets.DB_NAME }}" | base64 -w 0)
          DB_USER: $(echo -n "${{ secrets.DB_USER }}" | base64 -w 0)
          SECRET_KEY: $(echo -n "${{ secrets.SECRET_KEY }}" | base64 -w 0)
        EOF

    - name: Verify deployment.yaml exists
      run: |
        if [ ! -f argo-repo/manifest/deployment.yaml ]; then
          echo "File not found!"
          exit 1
        fi

    - name: Update Kubernetes manifests
      run: |
        sed -i 's|image: .*|image: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}|' argo-repo/manifest/deployment.yaml

    - name: Commit and push changes
      run: |
        cd argo-repo
        git config --global user.name "kkkikki"
        git config --global user.email "kaseykim7123@gmail.com"
        git add manifest/deployment.yaml
        git commit -m "Update image to ${{ github.sha }}"
        git push

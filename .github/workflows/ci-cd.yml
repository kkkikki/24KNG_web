name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: vxztu2/24kng_webpages
  ARGOCD_REPO: TurtleShip1904/24KNG_argocd

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: 3306
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install Pillow
        pip install -r requirements.txt
        pip install mysqlclient
        sudo apt-get update
        sudo apt-get install -y libmysqlclient-dev

    - name: Debug Secrets
      run: |
        echo "DB_NAME=${{ secrets.DB_NAME }}"
        echo "DB_USER=${{ secrets.DB_USER }}"
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
        echo "DB_HOST=${{ secrets.DB_HOST }}"


    - name: Create .env file
      run: |
        set -e
        touch .env
        echo "Touched .env file" >> debug.log
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        cat .env
        cat debug.log
        ls -al
        echo "Finished creating .env file"

        # Django 프로젝트 루트 디렉토리로 .env 파일 복사
        cp .env ./test/app/.env
        echo "Copied .env file to Django project root"
        ls -al ./test/app

    - name: Run tests
      run: |
        cd ./test/app
        echo "Current directory: $(pwd)"
        echo "Contents of current directory:"
        ls -al
        echo "Contents of .env file:"
        cat .env
        echo "DB_NAME from environment: $DB_NAME"
        python manage.py test


  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build Docker image
      working-directory: ./test/app/
      run: |
        echo pwd
        docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
        docker build -t ${{ env.DOCKER_IMAGE }}:latest .

      
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Push Docker image
      run: |
        docker push ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        docker push ${{ env.DOCKER_IMAGE }}:latest

  update-argocd-repo:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        repository: ${{ env.ARGOCD_REPO }}
        token: ${{ secrets.ARGOCD_REPO_TOKEN }}
        fetch-depth: 1
        path: argo-repo  # 명시적으로 디렉토리 설정
    - name: Verify deployment.yaml exists
      run: |
        if [ ! -f argo-repo/test2/deployment.yaml ]; then
          echo "File not found!"
          exit 1
        fi
    - name: Update Kubernetes manifests
      run: |
        sed -i 's|image: .*|image: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}|' argo-repo/test2/deployment.yaml
    - name: Commit and push changes
      run: |
        cd argo-repo
        git config --global user.name "TurtleShip1904"
        git config --global user.email "kaseykim7123@gmail.com"
        git add test2/deployment.yaml
        git commit -m "Update image to ${{ github.sha }}"
        git push
